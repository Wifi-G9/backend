from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.request import Request
from openai import OpenAI

API_OPENAI = "https://api.openai.com/v1/chat/completions"


class ChatGPTDescription(APIView):
    def get(self, request: Request) -> Response:
        """
               Function returning a short description generated by ChatGPT for the given word
               :param request: Request
               :return: Response with data: dict and status: status
               Response(
                   {
                       "description": "description generated by ChatGPT" or "Description not found"
                   },
                   status_code: int = 200 if description exists else 404
               )
        """
        word_searched = request.query_params.get("search", None)
        description = self.get_gpt_description(word_searched)

        if not description:
            return Response({"description": "Description not found"}, status=status.HTTP_404_NOT_FOUND)

        return Response({"description": description}, status=status.HTTP_200_OK)

    @staticmethod
    def get_gpt_description(word: str) -> str:
        """
        Calls OpenAI GPT-3.5-turbo API to generate a description for the given word.
        :param word: str
        :return: str
        """
        client = OpenAI()
        prompt = f"Describe the {word} in maximum 100 words"

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )

        description = response['choices'][0]['message']['content'].strip()

        return description
