import os
import openai
from rest_framework.views import APIView

from rest_framework.response import Response
from rest_framework import status
from rest_framework.request import Request

API_OPENAI = "https://api.openai.com/v1/chat/completions"
CHATGPT_MODEL = "gpt-3.5-turbo"


class ChatGPTDescription(APIView):
    def get(self, request: Request) -> Response:
        """
               Function returning a short description generated by ChatGPT for the given word
               :param request: Request
               :return: Response with data: dict and status: status
               Response(
                   {
                       "description": "description generated by ChatGPT" or "Description not found"
                   },
                   status_code: int = 200 if description exists else 404
               )
        """
        word_searched = request.query_params.get("message", None)
        description = self.get_gpt_description(word_searched)

        if description is None:
            return Response({"response": "Description not found"}, status=status.HTTP_404_NOT_FOUND)

        return Response({"response": description}, status=status.HTTP_200_OK)

    @staticmethod
    def get_gpt_description(word: str) -> str | None:
        """
        Calls OpenAI GPT-3.5-turbo API to generate a description for the given word.
        :param word: str
        :return: string | None
        """
        api_key = os.environ.get("OPENAI_KEY")
        openai.api_key = api_key
        if api_key is None:
            return None

        prompt = f"Describe the word \"{word}\" in a sentence"
        messages = [{"role": "user", "content": prompt}]

        response = openai.chat.completions.create(
            model=CHATGPT_MODEL,
            messages=messages,
            temperature=0,
        )

        return response.choices[0].message.content
